package net.vksn.bedrock;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.apache.log4j.Logger;
import org.dbunit.DatabaseUnitException;
import org.dbunit.database.DatabaseConnection;
import org.dbunit.database.DatabaseSequenceFilter;
import org.dbunit.database.IDatabaseConnection;
import org.dbunit.dataset.Column;
import org.dbunit.dataset.DataSetException;
import org.dbunit.dataset.FilteredDataSet;
import org.dbunit.dataset.IDataSet;
import org.dbunit.dataset.ITable;
import org.dbunit.dataset.filter.ITableFilter;
import org.dbunit.dataset.xml.FlatXmlDataSet;
import org.dbunit.operation.DatabaseOperation;
import org.junit.After;
import org.junit.Before;

/**
 * Base class for test that needs databse 
 * @author timii
 *
 */
public abstract class AbstractDatabaseTestCase {
	private static final Logger log = Logger.getLogger(AbstractDatabaseTestCase.class);
	@Before
	public void setUpDatabase() {
		try {
			final IDatabaseConnection connection = getConnection();
			final IDataSet dataSet = getDataSet(connection);
			for(String tablename : dataSet.getTableNames()) {
				ITable table = dataSet.getTable(tablename);
				log.debug("Constructing table " +tablename + "with columns: ");
				for(Column column : table.getTableMetaData().getColumns()) {
					log.debug(column.getColumnName());
				}
			}
			DatabaseOperation.CLEAN_INSERT.execute(connection, dataSet);
		}
		catch(SQLException e) {	
			throw new RuntimeException(e);
		} 
		catch (ClassNotFoundException e) {
			throw new RuntimeException("Cannot find needed classes for hsqldb " + e);
		} catch (DatabaseUnitException e) {
			throw new RuntimeException("Could not initialize database " + e);
		}
	
	} 
	
	private IDataSet getDataSet(IDatabaseConnection connection) {

		FlatXmlDataSet dataSet = null;
		try {
			ITableFilter filter = new DatabaseSequenceFilter(connection);
			dataSet = new FlatXmlDataSet(new File(getDataSetXmlPath()));
			new FilteredDataSet(filter, dataSet);
		} catch (DataSetException e) {
			throw new RuntimeException(e);
		} catch (IOException e) {
			throw new RuntimeException("Cannot find dataset file: " );
		} catch (SQLException e) {
			throw new RuntimeException("Could not create filter " + e);
		}
		return dataSet;
	}
	
	private String getDataSetXmlPath() {
		String canonicalName = getClass().getCanonicalName().replace(".", "/");
		URL path = getClass().getResource("/"+ canonicalName+"-dataset.xml");
		
		if(path == null) {
			throw new RuntimeException("Could not find dataset xml: "+ canonicalName + "-dataset.xml");
		}
		return path.getPath();
	}
	private IDatabaseConnection getConnection()
	 throws ClassNotFoundException, SQLException {
	  Class.forName("org.hsqldb.jdbcDriver");
	  return new DatabaseConnection(DriverManager.
	    getConnection("jdbc:hsqldb:mem:test",
	      "sa", ""));
	}
	
	@After
	public void tearDown() {
		
	}
}
