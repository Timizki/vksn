package net.vksn.bedrock.dao.hibernate;

import java.util.Collection;

import javax.persistence.EntityNotFoundException;

import net.vksn.bedrock.dao.UserDAO;
import net.vksn.bedrock.model.User;
import net.vksn.bedrock.query.Query;
import net.vksn.bedrock.query.UserQuery;

import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;

public class HibernateUserDAO extends AbstractHibernateDAO<User> implements UserDAO {

	public HibernateUserDAO() {
		super(User.class);
	}

	@SuppressWarnings("unchecked")
	@Override
	public Collection<User> getByQuery(Query query) {
		Criteria criteria = createCriteria();
		populateCriteria(criteria, query);
		if(query instanceof UserQuery) {
			UserQuery q = (UserQuery)query;
			if(q.getUsername() != null) {
				criteria.add(Restrictions.eq("username", q.getUsername()));
			}
		}
		return criteria.list();
	}

	public Collection<User> getByQuery(UserQuery query) {		
		return getByQuery((Query)query);
	}

	@Override
	public void store(User entity) {
		super.store(entity);
	}

	public User getUser(int id) throws EntityNotFoundException {
		return super.get(id);
	}

	public User getUserByUsername(String username) throws EntityNotFoundException {
		Criteria criteria = createCriteria();
		criteria.add(Restrictions.eq("username", username));
		if(criteria.list().size() == 0) {
			throw new EntityNotFoundException();
		}
		return (User)criteria.list().iterator().next();
	}
}
